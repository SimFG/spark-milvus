import org.apache.spark.ml.feature.{Tokenizer, Word2Vec}
import org.apache.spark.ml.linalg.Vector
import org.apache.spark.sql.functions.udf
import org.apache.spark.sql.{SaveMode, SparkSession}

object QuickStart extends App {

  val spark = SparkSession.builder().master("local[*]")
    .appName("HelloSparkMilvus")
    .getOrCreate()

  import spark.implicits._

  // Create DataFrame
  val sampleDF = Seq(
    (1, "Milvus was created in 2019 with a singular goal: store, index, and manage massive embedding vectors generated by deep neural networks and other machine learning (ML) models."),
    (2, "As a database specifically designed to handle queries over input vectors, it is capable of indexing vectors on a trillion scale. "),
    (3, "Unlike existing relational databases which mainly deal with structured data following a pre-defined pattern, Milvus is designed from the bottom-up to handle embedding vectors converted from unstructured data."),
    (4, "As the Internet grew and evolved, unstructured data became more and more common, including emails, papers, IoT sensor data, Facebook photos, protein structures, and much more.")
  ).toDF("id", "text")

  val tokenizer = new Tokenizer().setInputCol("text").setOutputCol("tokens")
  val tokenizedDf = tokenizer.transform(sampleDF)

  // Learn a mapping from words to Vectors.
  val word2Vec = new Word2Vec()
    .setInputCol("tokens")
    .setOutputCol("vectors")
    .setVectorSize(32)
    .setMinCount(0)
  val model = word2Vec.fit(tokenizedDf)

  val vectorToArrayUDF = udf((v: Vector) => v.toArray)

  val embeddedDf = model.transform(tokenizedDf).withColumn("embeddings", vectorToArrayUDF($"vectors"))

  val milvusDf = embeddedDf.drop("tokens").drop("vectors")

  milvusDf.write.format("milvus")
    .option("milvus.host", "localhost")
    .option("milvus.port", "19530")
    .option("milvus.collection.name", "hello_spark_milvus")
    .option("milvus.collection.vectorField", "embeddings")
    .option("milvus.collection.vectorDim", "32")
    .option("milvus.collection.primaryKeyField", "id")
    .mode(SaveMode.Append)
    .save()

  milvusDf.write.format("milvus")
    .option("milvus.uri", "https://in01-1479b85614880b2.aws-us-west-2.vectordb-uat3.zillizcloud.com:19537")
    .option("milvus.token", "root:n7}y3XJb4<oxMORqRU!!TMn1swDK4[]Q")
    .option("milvus.collection.name", "hello_spark_milvus")
    .option("milvus.collection.vectorField", "embeddings")
    .option("milvus.collection.vectorDim", "32")
    .option("milvus.collection.primaryKeyField", "id")
    .mode(SaveMode.Append)
    .save()

  val milvusOptions = Map(
      "milvus.uri" -> "https://in01-1479b85614880b2.aws-us-west-2.vectordb-uat3.zillizcloud.com:19537",
      "milvus.token" -> "root:n7}y3XJb4<oxMORqRU!!TMn1swDK4[]Q",
      "milvus.collection.name" -> "hello_spark_milvus",
      "milvus.collection.vectorField" -> "vec",
      "milvus.collection.vectorDim" -> "5",
      "milvus.collection.primaryKeyField" -> "id"
    )
}
